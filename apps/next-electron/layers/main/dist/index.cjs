"use strict";
var require$$1 = require("electron");
var require$$2 = require("url");
var require$$1$1 = require("path");
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  var n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    Object.keys(e).forEach(function(k) {
      if (k !== "default") {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function() {
            return e[k];
          }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}
const ALLOWED_ORIGINS_AND_PERMISSIONS = new Map([[new require$$2.URL("http://localhost:3000/").origin, new Set()]]);
const ALLOWED_EXTERNAL_ORIGINS = new Set([
  "https://github.com",
  "https://yerba.vercel.app",
  "https://yerba.ping.gg"
]);
require$$1.app.on("web-contents-created", (_, contents) => {
  contents.on("will-navigate", (event, url) => {
    const { origin } = new require$$2.URL(url);
    if (ALLOWED_ORIGINS_AND_PERMISSIONS.has(origin)) {
      return;
    }
    event.preventDefault();
    {
      console.warn("Blocked navigating to an unallowed origin:", origin);
    }
  });
  contents.session.setPermissionRequestHandler((webContents, permission, callback) => {
    var _a;
    const { origin } = new require$$2.URL(webContents.getURL());
    const permissionGranted = !!((_a = ALLOWED_ORIGINS_AND_PERMISSIONS.get(origin)) == null ? void 0 : _a.has(permission));
    callback(permissionGranted);
    if (!permissionGranted && true) {
      console.warn(`${origin} requested permission for '${permission}', but was blocked.`);
    }
  });
  contents.setWindowOpenHandler(({ url }) => {
    const { origin } = new require$$2.URL(url);
    if (ALLOWED_EXTERNAL_ORIGINS.has(origin)) {
      require$$1.shell.openExternal(url).catch(console.error);
    } else {
      console.warn("Blocked the opening of an unallowed origin:", origin);
    }
    return { action: "deny" };
  });
  contents.on("will-attach-webview", (event, webPreferences, params) => {
    const { origin } = new require$$2.URL(params.src);
    if (!ALLOWED_ORIGINS_AND_PERMISSIONS.has(origin)) {
      {
        console.warn(`A webview tried to attach ${params.src}, but was blocked.`);
      }
      event.preventDefault();
      return;
    }
    delete webPreferences.preload;
    delete webPreferences.preloadURL;
    webPreferences.nodeIntegration = false;
  });
});
async function createWindow() {
  const browserWindow = new require$$1.BrowserWindow({
    show: false,
    webPreferences: {
      nativeWindowOpen: true,
      webviewTag: false,
      preload: require$$1$1.join(__dirname, "../../preload/dist/index.cjs")
    },
    titleBarStyle: "hidden"
  });
  browserWindow.on("ready-to-show", () => {
    browserWindow == null ? void 0 : browserWindow.show();
    {
      browserWindow == null ? void 0 : browserWindow.webContents.openDevTools();
    }
  });
  const pageUrl = "http://localhost:3000/";
  await browserWindow.loadURL(pageUrl);
  return browserWindow;
}
async function restoreOrCreateWindow() {
  let window = require$$1.BrowserWindow.getAllWindows().find((w) => !w.isDestroyed());
  if (window === void 0) {
    window = await createWindow();
  }
  if (window.isMinimized()) {
    window.restore();
  }
  window.focus();
}
const isSingleInstance = require$$1.app.requestSingleInstanceLock();
if (!isSingleInstance) {
  require$$1.app.quit();
  process.exit(0);
}
require$$1.app.on("second-instance", restoreOrCreateWindow);
require$$1.app.disableHardwareAcceleration();
require$$1.app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    require$$1.app.quit();
  }
});
require$$1.app.on("activate", restoreOrCreateWindow);
require$$1.app.whenReady().then(restoreOrCreateWindow).catch((e) => console.error("Failed create window:", e));
{
  require$$1.app.whenReady().then(() => Promise.resolve().then(function() {
    return /* @__PURE__ */ _interopNamespace(require("electron-devtools-installer"));
  })).then(({ default: installExtension, VUEJS3_DEVTOOLS }) => installExtension(VUEJS3_DEVTOOLS, {
    loadExtensionOptions: {
      allowFileAccess: true
    }
  })).catch((e) => console.error("Failed install extension:", e));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
